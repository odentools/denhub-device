/**
 * Test Script for denhub-device-generator
 */

var assert = require('assert'),
	fs = require('fs'), spawn = require('child_process').spawn,
	os = require('os');


describe('Execution of Generator', function () {

	// The following files should be generated by Generator
	var GENERATE_FILES = [
		'/commands.json',
		'/config.json',
		'/handler.js',
		'/index.js',
		'/package.json'
	];

	// Path of the test working directory
	var work_dir_path = null;

	// Before process
	before(function () {

		// Make a temporary directory
		work_dir_path = fs.mkdtempSync('/tmp/test-device-');
		console.log('[TEST] The test working directory has been created ' + work_dir_path);

	});

	// Test - Execute the generator as init mode
	it('Execute with --init && --yes', function (done) {

		var gen = spawn('node', [__dirname + '/../scripts/generator.js', '--init', '--yes'], {
			cwd: work_dir_path,
			env: process.env
		});

		gen.stdin.on('error', function (err) {

			// console.log(err);

		});

		gen.stdout.on('data', function (data) {

			var l = data.toString();

			// Write the strings to STDIN of the generator
			if (l.match(/deviceName/)) {
				gen.stdin.write('test-device-1' + os.EOL);
			} else if (l.match(/deviceType/)) {
				gen.stdin.write('test-device' + os.EOL);
			} else if (l.match(/deviceToken/)) {
				gen.stdin.write('' + os.EOL);
			} else if (l.match(/denhubServerHost/)) {
				gen.stdin.write('ws://localhost:3000/' + os.EOL);
			}

		});

		gen.on('close', function (exit_code) {

			// Check the exit code
			assert.equal(exit_code, 0, 'Generator should be terminated as exit_code = 0');

			// Check the generated files
			GENERATE_FILES.forEach(function (filename, i) {

				(function() {

					// Check an existence of the file
					assert.doesNotThrow(function () {
						fs.statSync(work_dir_path + filename);
					}, null, 'This file should be generated: ' + work_dir_path + filename + ' ');

				})(filename);

			});

			// Done
			done();

		});

	});



});
